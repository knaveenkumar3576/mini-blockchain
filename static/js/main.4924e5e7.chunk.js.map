{"version":3,"sources":["logo.svg","components/Block/index.js","components/TransactionBlocks/index.js","containers/Home/SearchBlock/index.js","components/axios-block.js","containers/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Block","blockComponent","block","setBlock","blockDisplay","ver","size","time","n_tx","height","weight","Card","style","width","Body","Title","Text","id","JSON","stringify","undefined","Footer","Button","variant","disabled","hasOwnProperty","prev_block","onClick","TransactionBlocks","useState","transactionIndex","setTransactionIndex","useEffect","console","log","transactionComponent","transactions","tx","length","selectedTransaction","transactionDisplay","block_height","marginLeft","SearchBlock","handleSearch","toggleLatestBlock","searchRef","React","createRef","Form","onSubmit","e","preventDefault","value","Group","controlId","Label","Control","ref","element","type","className","axiosHandler","axios","create","baseURL","PROXY_URL","Home","blockDetails","setBlockDetails","selectedBlock","showLatestBlock","get","then","result","data","hash","catch","Container","Row","Col","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4924e5e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport {Card, Button} from 'react-bootstrap'\r\n\r\nconst Block = ({block, setBlock}) => {\r\n    let blockComponent;\r\n    if(block !== null) {\r\n        let blockDisplay = {\r\n            \"Version\" : block.ver,\r\n            \"Size\" : block.size,\r\n            \"Time\" : block.time,\r\n            \"Number of Transactions\" : block.n_tx,\r\n            \"Height\" : block.height,\r\n            \"Weight\" : block.weight\r\n        } \r\n        blockComponent = (\r\n            <Card style={{ width: '30rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title> Block Details </Card.Title>\r\n                    <Card.Text>\r\n                        <pre id=\"json\"> {JSON.stringify(blockDisplay, undefined, 2)} </pre>\r\n                    </Card.Text>\r\n                    <Card.Footer>\r\n                        <Button \r\n                            variant=\"primary\" \r\n                            disabled={!block.hasOwnProperty('prev_block') || block.prev_block == null} \r\n                            onClick={() => setBlock(block.prev_block)}\r\n                        >\r\n                            Trace previous block\r\n                        </Button>            \r\n                    </Card.Footer>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    } else {\r\n        blockComponent = ( \r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title> Block Details</Card.Title>\r\n                    <Card.Text>\r\n                        No block available\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card> \r\n        )      \r\n    }\r\n\r\n    return blockComponent;\r\n}\r\n\r\nexport default Block;","// import React, {useState, useEffect} from 'react';\r\n// import {Card, Button} from 'react-bootstrap'\r\n\r\n// const TransactionBlocks = ({transactions}) => {    \r\n//     let [transactionIndex, setTransactionIndex] = useState(0);\r\n\r\n//     console.log(transactions)\r\n//     return (\r\n//         <Card style={{ width: '18rem' }}>\r\n//             <Card.Body>\r\n//                 <Card.Title>{transactions[transactionIndex].hash}</Card.Title>\r\n//                 <Card.Text>\r\n\r\n//                 </Card.Text>\r\n//                 <Card.Footer>\r\n//                     <Button \r\n//                         variant=\"primary\" \r\n//                         disabled={transactionIndex === 0} \r\n//                         onClick={() => setTransactionIndex(transactionIndex-1)}\r\n//                     >\r\n//                         Prev\r\n//                     </Button>            \r\n//                     <Button \r\n//                         variant=\"primary\" \r\n//                         disabled={transactionIndex === transactions.length-1} \r\n//                         onClick={() => setTransactionIndex(transactionIndex+1)}\r\n//                     >\r\n//                         Next\r\n//                     </Button>            \r\n\r\n//                 </Card.Footer>\r\n//             </Card.Body>\r\n//         </Card>\r\n//     )\r\n//  }\r\n\r\n//  export default TransactionBlocks;\r\n\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport {Card, Button} from 'react-bootstrap'\r\n\r\nconst TransactionBlocks = ({block}) => {    \r\n    let [transactionIndex, setTransactionIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTransactionIndex(0);\r\n    }, [block])\r\n\r\n    console.log(\"transactionIndex\" + transactionIndex);\r\n\r\n    let transactions = block && block.tx && block.tx.length > 0 ? block.tx : []\r\n    let transactionComponent;\r\n\r\n    if(transactions.length) {\r\n        let selectedTransaction = transactions[transactionIndex];\r\n\r\n        let transactionDisplay = {\r\n            \"Version\" : selectedTransaction.ver,\r\n            \"Size\" : selectedTransaction.size,\r\n            \"Time\" : selectedTransaction.time,\r\n            \"Height\" : selectedTransaction.block_height,\r\n            \"Weight\" : selectedTransaction.weight\r\n        } \r\n        transactionComponent =  (\r\n            <Card style={{ width: '30rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title> Transaction Details</Card.Title>\r\n                    <Card.Text>\r\n                        <pre id=\"json\"> {JSON.stringify(transactionDisplay, undefined, 2)} </pre>\r\n                    </Card.Text>\r\n                    <Card.Footer>\r\n                        <Button \r\n                            variant=\"primary\" \r\n                            disabled={transactionIndex === 0} \r\n                            onClick={() => setTransactionIndex(transactionIndex-1)}\r\n                        >\r\n                            Prev\r\n                        </Button>            \r\n                        <Button \r\n                            style={{ marginLeft: '5px' }}\r\n                            variant=\"primary\" \r\n                            disabled={transactionIndex === transactions.length-1} \r\n                            onClick={() => setTransactionIndex(transactionIndex+1)}\r\n                        >\r\n                            Next\r\n                        </Button>            \r\n                    </Card.Footer>\r\n                </Card.Body>\r\n            </Card>\r\n        )    \r\n    } else {\r\n        transactionComponent = ( <Card style={{ width: '18rem' }}>\r\n            <Card.Body>\r\n                <Card.Title> Transaction Details</Card.Title>\r\n                <Card.Text>\r\n                    No transaction available for the selected block\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card> \r\n        )      \r\n    }\r\n\r\n    return transactionComponent;\r\n }\r\n\r\n export default TransactionBlocks;","import React from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\n\r\nconst SearchBlock = ({handleSearch, toggleLatestBlock}) => {\r\n\r\n    let searchRef = React.createRef();\r\n\r\n    return (\r\n        <Form onSubmit={(e) => {\r\n            e.preventDefault();\r\n            handleSearch(searchRef.value)\r\n            toggleLatestBlock(false);\r\n        }}>\r\n        <Form.Group controlId=\"formBlockHash\">\r\n            <Form.Label>Search block</Form.Label>\r\n            <Form.Control ref={(element) => searchRef=element} type=\"text\" />\r\n            <Form.Text className=\"text-muted\">\r\n            Search a block with a hash\r\n            </Form.Text>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n            Search\r\n        </Button>\r\n        <Button \r\n            style={{ marginLeft: '30px' }}\r\n            variant={\"success\"} \r\n            onClick={() => toggleLatestBlock(true)}\r\n        >\r\n            Get Latest Block\r\n        </Button>\r\n\r\n        </Form>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBlock;","import axios from 'axios';\r\n\r\nconst PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\r\nconst URL = 'https://blockchain.info/';\r\n\r\nconst axiosHandler = axios.create({\r\n    baseURL: PROXY_URL+URL,\r\n})\r\n\r\nexport default axiosHandler","import React, {useState, useEffect} from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap'\r\n\r\nimport Block from '../../components/Block'\r\nimport TransactionBlocks from '../../components/TransactionBlocks'\r\nimport SearchBlock from './SearchBlock';\r\n\r\nimport axiosHandler from '../../components/axios-block';\r\n\r\nconst Home = () => {    \r\n    let [blockDetails, setBlockDetails] = useState(null)\r\n    let [selectedBlock, setBlock] = useState(\"\");\r\n    let [showLatestBlock, toggleLatestBlock] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(showLatestBlock) {\r\n            axiosHandler.get(`/latestblock`).then(result => {\r\n                setBlock(result.data.hash)\r\n            })    \r\n        }\r\n    }, [showLatestBlock])\r\n\r\n    useEffect(() => {\r\n        if(selectedBlock !== \"\") {\r\n            axiosHandler.get(`rawblock/${selectedBlock}`).then(result => {\r\n                setBlockDetails(result.data)\r\n            }).catch(() => {\r\n                setBlockDetails(null)\r\n            })    \r\n        }\r\n    }, [selectedBlock])\r\n\r\n    return (\r\n    <>\r\n        <h1> Mini Block Chain</h1>\r\n\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <SearchBlock\r\n                        handleSearch = {setBlock}\r\n                        toggleLatestBlock = {toggleLatestBlock}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row\r\n                style={{ marginTop: '40px' }}\r\n            >\r\n                <Col>\r\n                    <Block \r\n                        block={blockDetails}\r\n                        setBlock={setBlock}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <TransactionBlocks \r\n                        block = {blockDetails}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>\r\n\r\n    </>)\r\n }\r\n\r\n export default Home;","import React from 'react';\nimport Home from './containers/Home'\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}